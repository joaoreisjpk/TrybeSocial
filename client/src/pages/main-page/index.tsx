import { GetServerSideProps } from 'next';
import Head from 'next/head';
import Header from '../../components/Header';
import { fetchRefreshToken } from '../../helpers/fetchers';
import JWT, { decrypt, encrypt, getTokenId } from '../../helpers/Encrypt';
import { useAuth } from '../../hooks/useAuth';
import { destroyCookie, parseCookies, setCookie } from 'nookies';
import { useEffect } from 'react';

interface IServerSideProps {
  email: string;
}
export default function MainPage({ email: propEmail }: IServerSideProps) {
  const { email, setEmail } = useAuth();

  useEffect(() => {
    if (email === '') {
      setEmail(propEmail);
    }
  }, []);

  return (
    <div>
      <Head>
        <title>Main Page - Trybe Social</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Header />
      <h1>Main Page</h1>
      <h2>Você está logado com o email: {email}</h2>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { 'tokenAt': encryptAt, 'tokenRt': encryptRt } = parseCookies(ctx);
  let tokenAt = decrypt(encryptAt);
  let tokenRt = decrypt(encryptRt);

  if (!tokenAt) {
    return {
      props: {},
      redirect: {
        destination: '/login',
        permanent: false,
      },
    };
  }

  const jwt = new JWT();

  if (!tokenAt) {
    const userId = getTokenId(jwt.verify(tokenRt) as string);
    const { acess_token, refresh_token, error } = await fetchRefreshToken(
      tokenRt,
      userId
    );

    if (acess_token && refresh_token) {
      setCookie(ctx, 'tokenAt', encrypt(acess_token), {
        maxAge: 60 * 30 /* 30min */,
      });

      setCookie(ctx, 'tokenRt', encrypt(refresh_token), {
        maxAge: 60 * 60 * 24 * 7 /* 7d */,
      });
    } else {
      destroyCookie(ctx, 'tokenRt');
      return {
        props: {},
        redirect: {
          destination: '/login',
          permanent: false,
        },
      };
    }
  }

  const { email } = jwt.decode(tokenAt) as { email: string };

  return {
    props: {
      email,
    },
  };
};
